<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MultipleActiveResultSets" xml:space="preserve">
    <value>MultipleActiveResultSets</value>
  </data>
  <data name="Multiple_Active_Result_Sets" xml:space="preserve">
    <value>Multiple Active Result Sets</value>
  </data>
  <data name="RetrieveDatabases" xml:space="preserve">
    <value>select Name AS DataBaseName from sys.databases WHERE name NOT IN ('master', 'tempdb', 'model', 'msdb');</value>
  </data>
  <data name="RetrieveTableRelationships" xml:space="preserve">
    <value>USE {0}
--USE [AdventureWorksLT2014]

IF OBJECT_ID(N'tempdb..#TmpFKRelationship') IS NOT NULL
BEGIN
DROP TABLE #TmpFKRelationship
END

SELECT * INTO #TmpFKRelationship FROM 
(
SELECT 
	ROW_NUMBER() OVER (ORDER BY fk.name) AS RowCounter,
    fk.name AS ForeignKeyName,
    tp.name AS ParentTableName,
    cp.name AS ParentColumnName,
    rf.name AS ReferencedTableName,	
    cr.name AS ReferencedColumnName,
	ist.TABLE_SCHEMA AS SchemaName,
	CASE 
            WHEN OBJECTPROPERTY(fk.object_id, 'CnstIsPrimaryKey') = 1 THEN 'OneToOne  '
            WHEN (
					SELECT COUNT(DISTINCT rp.name)
					FROM sys.foreign_key_columns AS fkc
					JOIN sys.objects AS rp ON fkc.referenced_object_id = rp.object_id
					WHERE fk.parent_object_id = fkc.parent_object_id
				) = 1 THEN 'OneToOne  '
            ELSE 'OneToMany '
        END AS 'RelationshipType'
FROM 
    sys.foreign_keys AS fk
INNER JOIN 
    sys.tables AS tp ON fk.parent_object_id = tp.object_id
INNER JOIN 
    sys.tables AS rf ON fk.referenced_object_id = rf.object_id
INNER JOIN 
    sys.foreign_key_columns AS fkc ON fk.object_id = fkc.constraint_object_id
INNER JOIN 
    sys.columns AS cp ON fkc.parent_column_id = cp.column_id AND fkc.parent_object_id = cp.object_id
INNER JOIN 
    sys.columns AS cr ON fkc.referenced_column_id = cr.column_id AND fkc.referenced_object_id = cr.object_id
LEFT JOIN 	
	INFORMATION_SCHEMA.TABLES ist on  rf.name = ist.TABLE_NAME -- join pn PK table

--where tp.name  in ('CustomerAddress','Customer','Address') AND rf.name  in ('CustomerAddress','Customer','Address') 
where tp.name  in ({1}) AND rf.name in ({1})
) AS FK_Relationships;

DECLARE @RowNum INT, @CurrentRowNum INT, @ColumnID NVARCHAR(MAX), @PKTable NVARCHAR(MAX),  @SchemaName NVARCHAR(MAX), @sqlCommand NVARCHAR(MAX), @PK_Occurance INT = 0;

SELECT @CurrentRowNum = MAX(RowCounter) FROM #TmpFKRelationship     -- start with last row
SELECT @RowNum = Count(*) From #TmpFKRelationship					-- total number of records

WHILE @RowNum &gt; 0 --loop until no more records                          
BEGIN   
	-- retrieve values
    SELECT	@SchemaName = SchemaName,
			@PKTable = ReferencedTableName, 
			@ColumnID = ReferencedColumnName 
	FROM #TmpFKRelationship 
	WHERE RowCounter= @CurrentRowNum 

    -- print cast(@PKTable as char(50)) + ' ' + @ColumnID + ' ' -- debugging
	
	-- build dynamic SQL, if PK Table has duplicate PK values (composite PKs)
	SET @sqlCommand = '
    SELECT @PK_OccuranceOUT = COUNT(*)
    FROM (
        SELECT ' + QUOTENAME(@ColumnID) + '
        FROM ' + QUOTENAME(@SchemaName) + '.' + QUOTENAME(@PKTable) + '
        GROUP BY ' + QUOTENAME(@ColumnID) + '
        HAVING COUNT(*) &gt; 1
    ) AS DuplicatePKs;';
	
	EXEC sp_executesql @sqlCommand, N'@PK_OccuranceOUT INT OUTPUT', @PK_Occurance OUTPUT; -- Execute dynamic SQL
	
	IF (@PK_Occurance &gt; 0)
	BEGIN
		-- update relationship to M:M as PK table has duplicate PKs (must be composite PKs)
		UPDATE #TmpFKRelationship SET RelationshipType = 'ManyToMany' WHERE RowCounter = @CurrentRowNum;
	END

    SELECT TOP 1 @CurrentRowNum=RowCounter FROM #TmpFKRelationship WHERE RowCounter &lt; @CurrentRowNum ORDER BY RowCounter DESC --next record
    set @RowNum = @RowNum - 1 --decrease count
END

-- return to caller
SELECT 
	ForeignKeyName,
    ParentTableName,
    ParentColumnName,
    ReferencedTableName,	
    ReferencedColumnName,	
    TRIM(RelationshipType) AS RelationshipType
FROM #TmpFKRelationship</value>
  </data>
  <data name="SelectDatabaseTables" xml:space="preserve">
    <value>USE {0}
SELECT 
sc.TABLE_CATALOG,
sc.TABLE_SCHEMA,
sc.TABLE_NAME, 
sc.COLUMN_NAME, 
sc.DATA_TYPE 
FROM INFORMATION_SCHEMA.COLUMNS sc
	INNER JOIN INFORMATION_SCHEMA.TABLES st ON sc.TABLE_NAME = st.TABLE_NAME
WHERE st.TABLE_TYPE = 'BASE TABLE'
      AND sc.TABLE_NAME != 'sysdiagrams';</value>
  </data>
  <data name="SelectDatabaseTablesWhere" xml:space="preserve">
    <value>WHERE TABLE_CATALOG = '{0}'</value>
  </data>
  <data name="SelectDependencyTableInfo" xml:space="preserve">
    <value>USE {0}
SELECT 
s.name AS '@Schema',
t.name AS '@Name',
t.object_id AS '@TableId',
(
SELECT DISTINCT
	c.name AS '@Name',
    --c.column_id AS '@ColumnId',
    IIF(i.object_id IS NOT NULL,1,0) AS '@IsPrimaryKey',
    f.referenced_object_id AS '@ForeignKey',
	CASE 
        WHEN isc.CHARACTER_MAXIMUM_LENGTH IS NULL THEN ' (' + UPPER(SUBSTRING(isc.DATA_TYPE, 1, 1)) + LOWER(SUBSTRING(isc.DATA_TYPE, 2, LEN(isc.DATA_TYPE))) + ')'
        ELSE ' (' + UPPER(SUBSTRING(isc.DATA_TYPE, 1, 1)) + LOWER(SUBSTRING(isc.DATA_TYPE, 2, LEN(isc.DATA_TYPE))) + ' ' + CAST(isc.CHARACTER_MAXIMUM_LENGTH AS VARCHAR(4)) + ')' 
    END AS '@ColumnDataType'
FROM sys.columns AS c
	LEFT OUTER JOIN sys.index_columns AS i ON c.object_id = i.object_id AND c.column_id = i.column_id AND i.index_id = 1
		LEFT OUTER JOIN sys.foreign_key_columns AS f ON c.object_id = f.parent_object_id AND c.column_id = f.parent_column_id
			INNER JOIN INFORMATION_SCHEMA.COLUMNS isc on  c.name = isc.COLUMN_NAME -- join table column
WHERE c.object_id = t.object_id
FOR XML PATH ('Column'),TYPE
)
FROM sys.schemas AS s
  INNER JOIN sys.tables AS t ON s.schema_id = t.schema_id
--  AND t.Name IN ('CustomerAddress', 'Address', 'Customer')
	AND t.Name IN ({1})
FOR XML PATH('Table'),ROOT('Tables')</value>
    <comment>USE {0}
SELECT
s.name AS '@Schema',
t.name AS '@Name',
t.object_id AS '@TableId',
(
SELECT c.name AS '@Name',
    --c.column_id AS '@ColumnId',
    IIF(i.object_id IS NOT NULL,1,0) AS '@IsPrimaryKey',
    f.referenced_object_id AS '@ForeignKey'
FROM sys.columns AS c
	LEFT OUTER JOIN sys.index_columns AS i ON c.object_id = i.object_id
	  AND c.column_id = i.column_id
	  AND i.index_id = 1
		LEFT OUTER JOIN sys.foreign_key_columns AS f ON c.object_id = f.parent_object_id AND c.column_id = f.parent_column_id
WHERE c.object_id = t.object_id
FOR XML PATH ('Column'),TYPE
)
FROM sys.schemAS AS s
  INNER JOIN sys.tables AS t ON s.schema_id = t.schema_id
  --AND t.Name IN ('CustomerAddress', 'Address', 'Customer')
  AND t.Name IN ({1})
FOR XML PATH('Table'),ROOT('Tables')</comment>
  </data>
  <data name="SelectDependencyTableName" xml:space="preserve">
    <value>use {0}
Select
S.[name] as 'Dependent_Tables'
From
sys.objects S inner join sys.sysreferences R
on S.object_id = R.rkeyid
Where
S.[type] = 'U' AND
R.fkeyid = OBJECT_ID('{1}')</value>
    <comment>[SalesLT].[CustomerAddress]</comment>
  </data>
  <data name="TrustServerCertificate" xml:space="preserve">
    <value>TrustServerCertificate</value>
  </data>
  <data name="Trust_Server_Certificate" xml:space="preserve">
    <value>Trust Server Certificate</value>
  </data>
</root>