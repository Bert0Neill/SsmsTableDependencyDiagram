Microsoft.Extensions.DependencyInjection


public interface ILoggerService
{
    void Log(string message);
}

public class LoggerService : ILoggerService
{
    public void Log(string message)
    {
        // Implement your logging logic, e.g., writing to the Activity Log or console
        Console.WriteLine($"Log: {message}");
    }
}


using Microsoft.Extensions.DependencyInjection;

public static class ServiceProviderContainer
{
    public static ServiceProvider ServiceProvider { get; private set; }

    public static void ConfigureServices()
    {
        var serviceCollection = new ServiceCollection();

        // Register your services here
        serviceCollection.AddSingleton<ILoggerService, LoggerService>();

        ServiceProvider = serviceCollection.BuildServiceProvider();
    }
}

using Microsoft.VisualStudio.Shell;
using System;
using System.Runtime.InteropServices;
using System.Threading;
using Task = System.Threading.Tasks.Task;

[PackageRegistration(UseManagedResourcesOnly = true, AllowsBackgroundLoading = true)]
[Guid("your-guid-here")]
public sealed class MyVSPackage : AsyncPackage
{
    protected override async Task InitializeAsync(CancellationToken cancellationToken, IProgress<ServiceProgressData> progress)
    {
        await base.InitializeAsync(cancellationToken, progress);

        // Configure DI container
        ServiceProviderContainer.ConfigureServices();
    }
}

public class SomeComponent
{
    private readonly ILoggerService _loggerService;

    public SomeComponent()
    {
        _loggerService = ServiceProviderContainer.ServiceProvider.GetService<ILoggerService>();
    }

    public void DoWork()
    {
        _loggerService.Log("Doing some work...");
    }
}



[Command(PackageGuids.guidPackageCmdSetString, PackageIds.MyCommand)]
internal sealed class MyCommand : BaseCommand<MyCommand>
{
    private readonly ILoggerService _logger;

    public MyCommand()
    {
        // Resolve dependencies
        _logger = ServiceProviderContainer.ServiceProvider.GetService<ILoggerService>();
    }

    protected override void Execute(object sender, EventArgs e)
    {
        _logger.Log("Command executed!");
    }
}



Summary
Add Microsoft.Extensions.DependencyInjection to manage dependencies.
Define interfaces and services you want to inject.
Create a ServiceProviderContainer class to configure services.
Initialize DI in the entry point (e.g., Package class) using ServiceProviderContainer.ConfigureServices().
Retrieve services using ServiceProviderContainer.ServiceProvider.GetService<T>().
By setting up DI in this way, you can use dependency injection throughout your VSIX project, enhancing modularity, testability, and maintainability.


